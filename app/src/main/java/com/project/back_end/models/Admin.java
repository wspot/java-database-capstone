package com.project.back_end.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

@Entity
public class Admin {

// @Entity annotation:
//    - Marks the class as a JPA entity, which means it represents a table in the database.
//    - It is required for persistence frameworks like Hibernate to map the class to a database table.

    // 1. 'id' field:
//    - Type: private Long
//    - Description: 
//      - Represents the unique identifier for the Admin entity.
//      - This field is auto-generated by the database using @GeneratedValue with strategy GenerationType.IDENTITY.
//      - It is the primary key of the entity, identified by @Id annotation.
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // 2. 'username' field:
//    - Type: private String
//    - Description: 
//      - Represents the username of the admin.
//      - Used to log into the system.
//      - @NotNull validation ensures that this field cannot be null when creating or updating an Admin.
    @NotNull(message = "username cannot be null")
    private String username;

    // 3. 'password' field:
//    - Type: private String
//    - Description: 
//      - Represents the password of the admin for authentication.
//      - The field is marked with @JsonProperty(access = JsonProperty.Access.WRITE_ONLY) to prevent the password from being exposed in JSON responses.
//      - @NotNull validation ensures the password cannot be null when creating or updating an Admin.
    @NotNull
    @Size(min = 6)
    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
    private String password;

// 4. Constructor(s):
//    - A no-argument constructor is implicitly provided, required by JPA for entity creation.
//    - A parameterized constructor can be added as needed.

    public Admin() {
    }

    public Admin(Long id, String username, String password) {
        this.id = id;
        this.username = username;
        this.password = password;
    }
// 5. Getters and Setters:
//    - Standard getter and setter methods are provided for accessing and modifying the fields.


    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}
